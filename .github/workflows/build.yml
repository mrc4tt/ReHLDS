name: C/C++ CI

on:
  push:
    branches: [master]
    paths-ignore:
      - '**.md'
      - '.github/**'

  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  testdemos:
    name: 'Test demos'
    runs-on: ubuntu-24.04
    container: rehldsorg/testdemos:latest
    defaults:
      run:
        shell: bash
        working-directory: /opt/HLDS

    strategy:
      fail-fast: false
      matrix:
        test: [
          { file: 'cstrike-muliplayer-1',       desc: 'CS: Multiplayer' },
          { file: 'rehlds-phys-single1',        desc: 'Half-Life: Physics singleplayer' },
          { file: 'crossfire-1-multiplayer-1',  desc: 'Half-Life: Multiplayer on crossfire map' },
          { file: 'shooting-hl-1',              desc: 'Half-Life: Shooting with several weapons' },
        ]

    steps:
      - name: Setup dependencies
        run: |
          chown root ~
          rsync -a deps/rehlds/* .
          mv $GITHUB_WORKSPACE/tests/swds.dll .

      - name: Play test
        env:
          demo: ${{ matrix.test.file }}
          desc: ${{ matrix.test.desc }}
        run: ./runTest.sh

  linux:
    name: 'Linux'
    runs-on: ubuntu-24.04
    container: debian:11-slim

    steps:
      - name: Install dependencies
        run: |
          dpkg --add-architecture i386
          apt-get update
          apt-get install -y \
            gcc-multilib g++-multilib \
            build-essential \
            libc6-dev libc6-dev-i386 \
            git cmake rsync \
            g++ gcc

      - name: Configure
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build and Run unittests
        run: |
          rm -rf build && cmake -DCMAKE_BUILD_TYPE=Unittests -B build && cmake --build build -j8
          retVal=0
          export LD_LIBRARY_PATH="rehlds/lib/linux32:$LD_LIBRARY_PATH"
          ./build/rehlds/engine_i486 2> /dev/null > result.log || retVal=$?
          while read line; do
            if [[ ${line} == *"Warning in test"* ]] ; then
              echo -e "\e[2;38m$line"
            elif [[ ${line} == *"Failure in test"* ]] ; then
              echo -e "\e[1;31m$line"
            else
              echo -e "\e[0;33m$line"
            fi
          done <<< $(cat result.log)

          if [ $retVal -ne 0 ] && [ $retVal -ne 3 ]; then
            echo -e "\e[30;41mExit code: $retVal\e[0m"
            exit 1 # Unittest failed
          else
            echo -e "\e[30;43mExit code: $retVal\e[0m"
          fi
        shell: bash

      - name: Build using GCC Compiler
        run: |
          rm -rf build && cmake -B build && cmake --build build -j8

      - name: Prepare HLSDK
        run: |
          mkdir -p publish/hlsdk
          rsync -a rehlds/common/ publish/hlsdk/common/
          rsync -a rehlds/dlls/ publish/hlsdk/dlls/
          rsync -a rehlds/pm_shared/ publish/hlsdk/pm_shared/
          rsync -a rehlds/public/ publish/hlsdk/public/ --exclude rehlds/
          rsync -a rehlds/public/rehlds/ publish/hlsdk/engine

      - name: Move files
        run: |
          mkdir -p publish/bin/linux32/valve/dlls		  
          
          mv build/rehlds/engine_i486.so publish/bin/linux32/engine_i486.so
          mv rehlds/version/appversion.h publish/appversion.h
          mv build/rehlds/dedicated/hlds_linux publish/bin/linux32/hlds_linux
          mv build/rehlds/HLTV/Console/hltv publish/bin/linux32/hltv
          mv build/rehlds/HLTV/Core/core.so publish/bin/linux32/core.so
          mv build/rehlds/HLTV/Proxy/proxy.so publish/bin/linux32/proxy.so
          mv build/rehlds/HLTV/DemoPlayer/demoplayer.so publish/bin/linux32/demoplayer.so
          mv build/rehlds/HLTV/Director/director.so publish/bin/linux32/valve/dlls/director.so
          mv build/rehlds/filesystem/FileSystem_Stdio/filesystem_stdio.so publish/bin/linux32/filesystem_stdio.so

      - name: Run GLIBC/ABI version compat test
        run: |
          binaries=(
            "publish/bin/linux32/engine_i486.so"
            "publish/bin/linux32/hlds_linux"
            "publish/bin/linux32/hltv"
            "publish/bin/linux32/core.so"
            "publish/bin/linux32/proxy.so"
            "publish/bin/linux32/demoplayer.so"
            "publish/bin/linux32/valve/dlls/director.so"
            "publish/bin/linux32/filesystem_stdio.so"
          )
          bash ./rehlds/version/glibc_test.sh ${binaries[@]}
          if [[ $? -ne 0 ]]; then
            exit 1 # Assertion failed
          fi
        shell: bash

      - name: Deploy artifacts
        uses: actions/upload-artifact@v4
        id: upload-job
        with:
          name: linux32
          path: publish/*

  publish:
    name: 'Publish'
    runs-on: ubuntu-24.04
    needs: [testdemos, linux]

    steps:
      - name: Deploying linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux32

      - name: Reading appversion.h
        run: |
          if [ -e appversion.h ]; then
            APP_VERSION=$(cat appversion.h | grep -wi '#define APP_VERSION_STRD' | sed -e 's/#define APP_VERSION_STRD[ \t\r\n\v\f]\+\(.*\)/\1/i' -e 's/\r//g')
            if [ $? -ne 0 ]; then
              APP_VERSION=""
            else
              # Remove quotes
              APP_VERSION=$(echo $APP_VERSION | xargs)
              echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
            fi
          fi
          rm -f appversion.h

      - name: Set SIGN_READY env
        run: |
          if [[ "${{ github.event_name }}" == "release" && \
                "${{ github.event.action }}" == "published" && \
                "${{ github.ref }}" == refs/tags/* ]]; then
            echo "SIGN_READY=true" >> $GITHUB_ENV
          else
           echo "SIGN_READY=false" >> $GITHUB_ENV
          fi

      - name: Final signing and Packaging bin/dbg
        id: packaging-job
        run: |
          if [[ "$SIGN_READY" == "true" ]]; then
            echo "Signing avalible."

            echo "${{ secrets.PUB_ASC }}" > "${{ secrets.PUB_ASC_FILE }}"
            echo "${{ secrets.KEY_ASC }}" > "${{ secrets.KEY_ASC_FILE }}"
            gpg --batch --yes --import "${{ secrets.PUB_ASC_FILE }}"
            gpg --batch --yes --import "${{ secrets.KEY_ASC_FILE }}"
            GPG_LINUX_FINGERPRINT=$(gpg --list-keys --with-colons | grep '^fpr' | head -n 1 | cut -d: -f10)
            echo "$GPG_LINUX_FINGERPRINT:6:" | gpg --batch --import-ownertrust
            echo "GPG_LINUX_FINGERPRINT=$GPG_LINUX_FINGERPRINT" >> $GITHUB_ENV
          else
            echo "Signing skipped."
          fi

          sign_file() {
            if [[ "$SIGN_READY" == "true" ]]; then
              local file=$1
              gpg --batch --yes --detach-sign --armor -u "$GPG_LINUX_FINGERPRINT" "$file"
              if [ $? -ne 0 ]; then
                echo "Error: Failed to sign $file"
                exit 2
              fi
              echo "$file signed successfully."
            else
              echo "$file not signed (SIGN_READY=$SIGN_READY)"
            fi
          }

          # Pack and try sign final archive
          7z a -tzip rehlds-bin-${{ env.APP_VERSION }}.zip bin/ hlsdk/
          sign_file "rehlds-bin-${{ env.APP_VERSION }}.zip"

          # Pack and try sign final archive
          7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -aoa rehlds-dbg-${{ env.APP_VERSION }}.7z debug/
          sign_file "rehlds-dbg-${{ env.APP_VERSION }}.7z"

        shell: bash

      - name: Publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rehlds-ci-${{ env.APP_VERSION }}
          path: |
            *.zip
            *.7z
            *.asc

      - name: Release artifacts
        uses: softprops/action-gh-release@v2
        id: publish-job
        if: |
          startsWith(github.ref, 'refs/tags/') &&
          steps.packaging-job.outcome == 'success'
        with:
          files: |
            *.zip
            *.7z
            *.asc

        env:
          GITHUB_TOKEN: ${{ secrets.API_TOKEN }}
